{
  "_args": [
    [
      {
        "raw": "csvrow",
        "scope": null,
        "escapedName": "csvrow",
        "name": "csvrow",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/opt/bin/oreilly-overview-of-the-node-js-ecosystem/04. NPM/04_02-Using An NPM Package"
    ]
  ],
  "_from": "csvrow@latest",
  "_id": "csvrow@0.1.0",
  "_inCache": true,
  "_location": "/csvrow",
  "_phantomChildren": {},
  "_requested": {
    "raw": "csvrow",
    "scope": null,
    "escapedName": "csvrow",
    "name": "csvrow",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/csvrow/-/csvrow-0.1.0.tgz",
  "_shasum": "b8ec03188c011ac1a04460bfb18d1193e4645271",
  "_shrinkwrap": null,
  "_spec": "csvrow",
  "_where": "/opt/bin/oreilly-overview-of-the-node-js-ecosystem/04. NPM/04_02-Using An NPM Package",
  "author": {
    "name": "Trent Mick",
    "email": "trentm@gmail.com",
    "url": "http://trentm.com"
  },
  "bugs": {
    "url": "https://github.com/trentm/node-csvrow/issues"
  },
  "contributors": [
    {
      "name": "Trent Mick",
      "email": "trentm@gmail.com",
      "url": "http://trentm.com"
    }
  ],
  "dependencies": {},
  "description": "parse a CSV row string",
  "devDependencies": {
    "tap": "0.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b8ec03188c011ac1a04460bfb18d1193e4645271",
    "tarball": "https://registry.npmjs.org/csvrow/-/csvrow-0.1.0.tgz"
  },
  "engines": [
    "node >=0.6.0"
  ],
  "homepage": "https://github.com/trentm/node-csvrow#readme",
  "keywords": [
    "csv",
    "parse"
  ],
  "main": "./lib/csvrow.js",
  "maintainers": [
    {
      "name": "trentm",
      "email": "trentm@gmail.com"
    }
  ],
  "name": "csvrow",
  "optionalDependencies": {},
  "readme": "This is a small node module for parsing individual CSV rows. This can be useful\nif you have, say, a user-provided string that is a \"comma-separated\" set of\nstrings. Simply splitting on commas doesn't quite suffice.\n\nIt has been a little while, but when I last looked, existing node.js CSV\nmodules didn't make it straightforward to just parse a single row of CSV data\nsynchronously.\n\nFollow <a href=\"https://twitter.com/intent/user?screen_name=trentmick\" target=\"_blank\">@trentmick</a>\nfor updates to this module.\n\n\n# Installation\n\n    npm install csvrow\n\nThis is also a single node.js module (lib/csvrow.js) with no external deps, so\nyou can alternatively just grab that file.\n\n\n# Usage\n\nTypical parsing as you'd expect:\n\n    > var csvrow = require('csvrow');\n    > csvrow.parse('a,b,c')\n    [ 'a', 'b', 'c' ]\n    > csvrow.parse(' a, b,, d')\n    [ 'a', 'b', '', 'd' ]\n\nAnd the reverse (stringifying):\n\n    > csvrow.stringify(['a', 'b', 'c'])\n    'a,b,c'\n    > csvrow.stringify(['a', 'space y', 'c'])\n    'a,\"space y\",c'\n\n`parse` and `stringify` should always cycle to the same value, including with\nsome weird edge cases. See the test suite and\n<http://en.wikipedia.org/wiki/Comma-separated_values>.\n\nThere is also a \"normalize\" function to get rid of spacing and empty columns:\n\n    > csvrow.normalize('a, b, , d')\n    'a,b,d'\n\nNote: dropping empty entries might not be what you want. Patches\nwelcome to make that optional.\n\n\n\n# Testing\n\n    npm test   # tests with first node version on the path\n\n\n# Versioning\n\nThe scheme I follow is most succintly described by the bootstrap guys\n[here](https://github.com/twitter/bootstrap#versioning). \n\ntl;dr: All versions are `<major>.<minor>.<patch>` which will be incremented for\nbreaking backward compat and major reworks, new features without breaking\nchange, and bug fixes, respectively.\n\n\n\n# License\n\nMIT.\n\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/trentm/node-csvrow.git"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "version": "0.1.0"
}
